;
; Title:	BBC Basic for Spectrum Next - Miscellaneous helper functions
; Author:	Dean Belfield
; Created:	10/05/2021
; Last Updated:	15/07/2021
;
; Modinfo:
; 15/05/2021:	Changed ASC_TO_HEX to ASC_TO_NUMBER; now parses decimal or hex
; 16/05/2021:	Added SWITCH_A
; 23/05/2021:	Added HLDE_TO_FPP, PRINT_BCD, NULLTOCR and CRTONULL
; 24/05/2021:	CRTONULL now preserves BC
; 15/07/2021:	Added SKIPNOTSP, NULLTOSP and SPTONULL

; Read a number and convert to binary
; If prefixed with &, will read as hex, otherwise decimal
;   Inputs: HL: Pointer in string buffer
;  Outputs: HL: Updated text pointer
;           DE: Value
;            A: Terminator (spaces skipped)
; Destroys: A,D,E,H,L,F
;
ASC_TO_NUMBER:		PUSH	BC		; Preserve BC
			LD	DE, 0		; Initialise DE
			CALL	SKIPSP		; Skip whitespace
			LD	A, (HL)		; Read first character
			CP	"&"		; Is it prefixed with '&' (HEX number)?
			JR	NZ, 3F		; Jump to decimal parser if not
			INC	HL		; Otherwise fall through to ASC_TO_HEX
;
1:	 		LD	A, (HL)		; Fetch the character
			CALL    UPPRC		; Convert to uppercase  
 			SUB	'0'		; Normalise to 0
			JR 	C, 4F		; Return if < ASCII '0'
			CP 	10		; Check if >= 10
			JR 	C,2F		; No, so skip next bit
			SUB 	7		; Adjust ASCII A-F to nibble
			CP 	16		; Check for > F
			JR 	NC, 4F		; Return if out of range
2:	   		LD	B, 4		; Shift DE left 4 times
			BSLA	DE, B		
        		OR      E		; OR the new digit in to the least significant nibble
        		LD      E, A
        		INC     HL		; Onto the next character
        		JR      1B		; And loop
;
3:			LD	A, (HL)
			SUB	'0'		; Normalise to 0
			JR	C, 4F		; Return if < ASCII '0'
			CP	10		; Check if >= 10
			JR	NC, 4F		; Return if >= 10
			EX 	DE, HL 		; Stick DE in HL
			LD	B, H 		; And copy HL into BC
			LD	C, L
			ADD	HL, HL 		; x 2 
			ADD	HL, HL 		; x 4
			ADD	HL, BC 		; x 5
			ADD	HL, HL 		; x 10
			EX	DE, HL
			ADD	DE, A 		; Add A to DE
			INC	HL
			JR	3B
4:			POP	BC 		; Fall through to SKIPSP here

; Skip a space
; HL: Pointer in string buffer
; 
SKIPSP:			LD      A, (HL)
        		CP      ' '
        		RET     NZ
        		INC     HL
        		JR      SKIPSP

; Skip a string
; HL: Pointer in string buffer
;
SKIPNOTSP:		LD	A, (HL)
			CP	' '
			RET	Z 
			INC	HL 
			JR	SKIPNOTSP

; Convert a character to upper case
;  A: Character to convert
;
UPPRC:  		AND     7FH
			CP      '`'
			RET     C
			AND     5FH		; CONVERT TO UPPER CASE
			RET

; Convert the buffer to a null terminated string and back
;	
NULLTOSP:		PUSH	BC 
			LD	B, 0
			LD	C, ' '
			JR	0F
SPTONULL:		PUSH	BC 
			LD	B, ' '
			LD	C, 0
			JR	0F
NULLTOCR:		PUSH 	BC
			LD	B, 0
			LD	C, CR 
			JR	0F
CRTONULL:		PUSH	BC
			LD	B, CR
			LD	C, 0	
0:			PUSH	HL
1:			LD	A, (HL)
			CP 	B 
			JR	Z, 2F
			INC	HL 
			JR	1B
2:			LD	(HL), C
			POP 	HL 
			POP	BC
			RET

; Convert BCD to ASCII
; HL: Pointer in string buffer
;  A: BCD number to convert
;
BCD_TO_ASC:		LD	C, A 		; Store A 
			SWAPNIB			; Get high nibble
			CALL	1F
			LD	A, C 
1:			AND	0x0F 
			ADD 	A, '0'
			LD	(HL), A 
			INC	HL 
			RET 

; Print BCD
;
PRINT_BCD:		ADD	A, 0
			DAA 
PRINT_BCD_1:		LD	C, A 
			SWAPNIB 
			CALL	1F 
			LD	A, C 
1:			AND	0x0F 
			ADD	A, '0'
			JP	OSWRCH

; Switch on A - lookup table immediately after call
;  A: Index into lookup table
;
SWITCH_A:		EX	(SP), HL		; Swap HL with the contents of the top of the stack
			ADD	A, A			; Multiply A by two
			ADD	HL, A 			; Index into the lookup table; this should immediately
			LD	A, (HL)			; follow the call. Fetch an address from the
			INC	HL 			; table.
			LD	H, (HL)
			LD	L, A
			EX	(SP), HL		; Swap this new address back, restores HL
			RET				; Return program control to this new address

; Decrease if not 0
;
DEC_D_NZ:		INC	D 
			DEC	D 
			RET	Z 
			DEC  	D 
			RET 
;
DEC_E_NZ:		INC	E 
			DEC	E 
			RET	Z 
			DEC  	E 
			RET 

; Convert LHED to a FPP
;
HLDE_TO_FPP:		PUSH	DE			
			EXX
			POP	DE 
			EX	DE, HL			; E, D are the least significant bytes
			EXX 
			LD	C, 0			; Exponent
			RET 