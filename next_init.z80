;
; Title:	BBC Basic Interpreter - Z80 version
;		Spectrum Next Initialisation
; Author:	Dean Belfield
; Created:	04/05/2021
; Last Updated:	05/10/2022
;
; Modinfo:
; 13/05/2021:	Added BUILD_VERSION
; 15/05/2021:	Updates for MODE command
; 17/05/2021:	Border colour now set in CLS
; 21/05/2021:	Added Initialise_RAM
; 23/05/2021:	Initialises page registers
; 25/05/2021:	Initialises FDRIVE
; 26/05/2021:	Cursor now on interrupt
; 04/06/2021:	Intitialises NEXT_SOUND
; 08/06/2021:	Test for ESC now done on interrupt
; 11/06/2021:	Now uses NREG definitions in equs.z80
; 14/06/2021:	Setup default (Spectrum) palette for L2 modes
; 24/06/2021:	Disabled RAM contention (Peripheral 3)
; 12/07/2021:	Added Reserve_UDG
; 15/07/2021:	Variables KEY_DELAY and KEY_REPEAT are initialised; Some KEY variables renamed
; 05/10/2022:	Preserve 50/60 and scandoubler when setting peripheral 1 bits for joystick

			MODULE	NEXT_INIT

System:			DI
			LD 	SP,Stack_Top			; Stick the stack somewhere safe for now

			NEXTREG	NREG.CONFIG_MAPPING, 0x03		
			NEXTREGMASK NREG.PERIPHERAL_1, %01110000, %00000101	; Peripheral 1 settings (joysticks set, 50/60 and scandoubler preserved)
			NEXTREG NREG.PERIPHERAL_2, %10101000	; Peripheral 2 settings
			NEXTREG NREG.PERIPHERAL_3, %11011110	; Peripheral 3 settings
;			NEXTREG	NREG.PERIPHERAL_4, %00011000	; Peripheral 4 settings
			NEXTREG	NREG.MACHINE_TYPE, %10110011	; Machine type - Native Next/128K+3

			NEXTREG NREG.MMU_SLOT_1, 0xFF		; MMU Slot 1 0x0000 - ROM
			NEXTREG NREG.MMU_SLOT_2, 0xFF		; MMU Slot 2 0x2000 - ROM
			NEXTREG NREG.MMU_SLOT_3, 0x0A		; MMU Slot 3 0x4000
			NEXTREG NREG.MMU_SLOT_4, 0x0B		; MMU Slot 4 0x6000
			NEXTREG NREG.MMU_SLOT_5, 0x04		; MMU Slot 5 0x8000
			NEXTREG NREG.MMU_SLOT_6, 0x05		; MMU Slot 6 0xA000
			NEXTREG NREG.MMU_SLOT_7, 0x0E		; MMU Slot 7 0xC000
			NEXTREG NREG.MMU_SLOT_8, 0x0F		; MMU Slot 8 0xE000

			NEXTREG	NREG.MEMORY_MAP_MODE, 0x00	; Spectrum Next mapping mode

			NEXTREG NREG.L2_ACTIVE_RAM, 0x09	; Layer 2 RAM bank
			NEXTREG NREG.L2_SHADOW_RAM, 0x09	; Layer 2 Shadow RAM bank

			NEXTREG NREG.CPU_SPEED, 0x00		; CPU to 3.5Mhz

			NEXTREG NREG.PALETTE_CONTROL, %00000000	; Select ULA, first palette, not ULANext
			
			Z80PORT	0x1FFD, %00000100		; Page 48K BASIC in
			Z80PORT 0x7FFD, %00010000

			CALL	Initialise_RAM
			CALL 	Initialise_Interrupt		; Initialise the interrupt handler
			CALL	Initialise_Palette

			XOR	A				; Set the video mode
			CALL	NEXT_GRAPHICS.Set_Video_Mode
			CALL	NEXT_SOUND.Initialise
			CALL    TELL
			DEFM	"Spectrum Next Version ", BUILD_VERSION, "\n\r"
			DEFM	"\n\r"
			DEFB    0
			EI
			JP	MAIN.COLD
;
; Initialise the RAM
;
Initialise_RAM:		LD	HL, RAM.Start
			LD	BC, RAM.Length
			LD	E, 0
1:			LD	(HL), E
			DEC	BC
			LD	A, B 
			OR	C 
			JR	NZ, 1B
			LD	A, %01000111:	  LD (TEXT_FOREGROUND), A
			LD	A, %01000111:	  LD (PLOT_COLOUR), A
			LD	A, "$":		  LD (FDRIVE), A
			LD	A, CONF_KEYRPT_1: LD (KEY_DELAY), A 
			LD	A, CONF_KEYRPT_2: LD (KEY_REPEAT), A
			RET

; Set HIMEM to reserve some space for UDGS
;  A: Number of banks to reserve (0 to 6)
; Returns:
; DE: HIMEM value for OSINIT
;
Reserve_UDG:		PUSH	AF
			LD	D, A			; Calculate HIMEM
			LD	A, (high @RAM_Top) - 1
			SUB	D
			LD	D, A 
			LD	E, 0
			POP	AF
			LD	HL, Reserve_UDG_Table	; Get the UDG_MASK
			ADD	HL, A 
			LD	A, (HL)
			LD	(UDG_MASK), A
			RET
;
; The mask is 1 bit per &20 (32) characters and is used to determine whether to read the character data from ROM (0) or RAM (1)
; The bits are read left to right, so %10000000 is characters 0-31, and %00000001 is characters 224 to 255
;
Reserve_UDG_Table:	DB	%00001000		; Characters &80 to &9F only are redefineable (default)
			DB	%00001100		; Characters &80 to &BF are redefineable
			DB	%00001110		; Characters &80 to &DF are redefineable 
			DB	%00001111		; Characters &80 to &FF are redefineable
			DB	%01001111		; Characters &20 to &3F, &80 to &FF are redefineable
			DB	%01101111		; Characters &20 to &5F, &80 to &FF are redefineable
			DB	%01111111		; Characters &20 to &FF are redefineable

;
; Initialise the L2 palette
;
Initialise_Palette:	LD	HL, Default_Palette
			LD	B, 16
			NEXTREG	NREG.PALETTE_CONTROL, %10010000 ; Change L2 first palette
1:			LD	A, 16
			SUB	B
			NEXTREG	NREG.PALETTE_INDEX, A 
			LD	A, (HL)
			NEXTREG NREG.PALETTE_VALUE_2, A 
			INC	HL
			LD	A, (HL) 
			NEXTREG NREG.PALETTE_VALUE_2, A
			INC	HL
			DJNZ	1B 
			RET
;
Default_Palette:	DW 	0x000,0x102,0x0A0,0x1A2,0x014,0x116,0x0B4,0x1B6
			DW	0x000,0x103,0x0E0,0x1E7,0x01C,0x11F,0x0FC,0x1FF

;
; Interrupt routine
;
Interrupt:		DI
			PUSH	AF, BC, DE, HL, IX
			EXX
			EX 	AF,AF'
			PUSH	AF, BC, DE, HL, IY

			CALL	NEXT_CURSOR.Move
			CALL	NEXT_IO.Read_Keyboard
			LD	(KEY_CODE), A
			CP	0x1B
			CALL	Z, PATCH.ESCSET
			LD	A, (TIME + 0)
			AND	0x02
			CALL	Z, NEXT_SOUND.Play_Queue

			LD	DE, 2
			LD	HL, (TIME + 0)
			ADD	HL, DE
			LD	(TIME + 0), HL
			JR	NC, 1F
			LD	HL, (TIME + 2)
			INC	HL
			LD	(TIME + 2), HL

1:			POP	IY, HL, DE, BC, AF
			EXX
			EX	AF,AF'
			POP	IX, HL, DE, BC, AF
			EI
			RET	
;
; Interrupt routine
;
Initialise_Interrupt:	LD	DE, IM2_Table		; The IM2 vector table (on page boundary)
                        LD	HL, IM2_JP              ; Pointer for 3-byte interrupt handler
                        LD	A, D                    ; Interrupt table page high address
                        LD	I, A                    ; Set the interrupt register to that page
                        LD	A, L                    ; Fill page with values
1:                      LD	(DE), A 
                        INC	E
                        JR	NZ, 1B
                        INC	D                       ; In case data bus bit 0 is not 0, we
                        LD	(DE), A                 ; put an extra byte in here
                        LD	(HL), 0xC3              ; Write out the interrupt handler, a JP instruction
                        INC	L
                        LD	(HL), low Interrupt     ; Store the address of the interrupt routine in
                        INC	L
                        LD	(HL), high Interrupt
                        IM	2                       ; Set the interrupt mode
                        RET

;
; Read NextReg
;
ReadMaskWrite_NextReg:								; INPUT: L = NextReg number, D = mask value (bits 1 = preserve)
													;        E = Set value (bits should be 0 wherever mask is 1)
			LD BC, PORT.REGISTER_SELECT				; Active port for TBBlue/Next feature configuration (0x243B)
			OUT (C), L								; Select active port
			INC B									; Port for reading/writing the selected TBBlue control register (0x253B)
			IN A, (C)								; Read nextreg
			AND D									; Mask out everything but the bits to preseve
			OR  E									; Apply the new bits we want to set or clear
			NEXTREG NREG.PERIPHERAL_1, A			; Write the combined value back to nextreg
			RET

			ENDMODULE
	