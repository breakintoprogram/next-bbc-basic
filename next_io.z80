;
; Title:	BBC Basic Interpreter - Z80 version
;		Spectrum Next I/O Routines
; Author:	Dean Belfield
; Created:	03/05/2021
; Last Updated:	12/07/2021
;
; Modinfo:
; 10/05/2021:	Started implementing VDU engine
; 11/05/2021:	Fixed bug in Scroll_Down
; 13/05/2021:	Removed (C) symbol from keytable; 0x7F is now delete
; 14/05/2021:	Fixed bug in Print_Char - now preserves A
; 15/05/2021:	Restored (C) symbol in keytable as ASCII 0xA9; Updates for MODE command
; 16/05/2021:	VDU system now uses SWITCH_A
; 17/05/2021:	Removed PUSH/POP wrapper around Read_Keyboard and added HT and BS codes; Tweaks for COLOUR, GCOL
; 19/05/2021:	Added LF and VT on Shift 6 and 7 in Read_Keyboard and COPY on Shift 1
; 20/05/2021:	Print_Char now preserves IX
; 21/05/2021:	Fixed debounce for EDIT and CAPS LOCK and added key repeat
; 26/05/2021:	Added support code for Layer 2 modes 2 and 3
; 16/06/2021:	Added VDU_GS (Set graphics origin)
; 21/06/2021:	Added VDU_DLE (CLG)
; 12/07/2021:	Added VDU_ETB (UDG)
; 13/07/2021:	JGH corrected VDU 19 count, added VDU 20, uses standard SS table, optimised CS-digit
;		To do: cursor keys &80+n, will need editor updating

			MODULE	NEXT_IO

; Read the keyboard and return an ASCII character code
; Returns:
;  A: 0x00 (NUL) if no key pressed
;
Read_Keyboard:		CALL	Keyscan			; Scan the keyboard

			LD	HL, (KEYSCAN)		; Are we stil pressing the same key combo
			XOR	A 
			SBC	HL, DE 	
			LD	A, CONF_KEYRPT_1	; Initial key repeat value
			JR	NZ, 1F			; No, so move onto next check
			LD	A,(KEYREPEAT)		; Simple key repeat
			DEC	A 
			LD	(KEYREPEAT), A
			LD	A, CONF_KEYRPT_2	; Subsequent key repeat value
			JR	Z, 1F
			XOR	A 
			RET

1:			LD	(KEYREPEAT), A
			LD	(KEYSCAN), DE 		; Store the new keyscan
			LD	A, E			; Get the keycode
			INC	A			; Check for 0xFF
			RET	Z			; Then no key has been pressed
			DEC	A
			LD	HL, KeyTable_Main	; Look up the key value
			ADD 	HL, A
			LD	A, (HL)			; Fetch the key value

			CP	"A"			; Is it a letter?
			JR	C, 3F			; No, so skip

			BIT	1, D 			; Has symbol shift been pressed?
			JR	NZ, 2F			; Yes, so get the shifted value
			LD	E, A			; Store the keycode
			LD	A, (FLAGS)		; Get caps lock flag
			AND	%00100000
			XOR	E
			BIT	0, D			; Has caps shift been pressed
			RET	Z			; No, so just return the letter
			XOR	%00100000		; Switch case
			RET
;
; It's a symbol shifted letter at this point
;
2:			SUB	"A"
			LD	HL, KeyTable_SS_Alpha	; Get the key value
			ADD	HL, A 
			LD	A, (HL)			; Get the character code
			RET
;
; It's not a letter at this point, but could be space or enter or shift
;
3:			BIT	0, D 			; Check for caps
			JR	NZ, 4F			; If pressed, we'll check for special cases
			BIT	1, D			; Has symbol shift been pressed
			RET	Z			; No, so just return the number
			CP	"0"
			JR	NC, SYMDIGIT		; SS+digit
			AND	A			; $00, $0d, $20
			JR	NZ, SYMDIGIT1
			LD	A,2			; $02, $0d, $20
SYMDIGIT1:		AND	3			; $02, $01, $00
			ADD	10			; $0c, $0b, $0a
SYMDIGIT:		AND	15			; Index from ASCII '0'
			LD	HL, KeyTable_SS_Numeric
			ADD	HL, A
			LD	A, (HL)
			RET
;
; Special cases, like escape, etc. Caps shift+nonletter is pressed here
;
4:			CP	"0"
			JR	NC, 5F			; digits
			AND	1
			ADD	10			; $30-$39,$3a,$3b
5:			AND	15			; '0','9',spc,ret
			LD	HL, KeyTable_CS_Numeric
			ADD	HL, A
			LD	A, (HL)
			CP	4
			RET	NC			; Not toggle key

			LD	B, %00010000		; Toggle
			DEC	A
			JR	Z, Toggle_Flags		; Caps Shift + 1
			LD	B, %00100000		; Toggle CAPS
			
;			CP	" "			; Caps Shift + Space
;			JR	NZ, 5F 
;			LD	A, 0x1B			; Return ESC
;			RET 
;5:			CP	"0"			; Caps Shift + 0
;			JR	NZ, 6F
;			LD	A, 0x7F			; Return DEL
;			RET 
;6:			CP	"5"			; Caps Shift + 5
;			JR	NZ, 7F
;			LD	A, 0x88			; Return Cursor Left
;			RET
;7:			CP	"8"			; Caps Shift + 8
;			JR	NZ, 8F
;			LD	A, 0x89			; Return Cursor Right
;			RET 
;8:			CP	"6"			; Caps Shift + 6
;			JR	NZ, 9F
;			LD	A, 0x8A			; Return Cursor Down
;			RET 
;9:			CP	"7"			; Caps Shift + 7
;			JR	NZ, 10F
;			LD	A, 0x8B			; Return Cursor Up
;			RET 
;10:			CP	"2"			; Caps Shift + 2
;			LD	B, %00100000		; Toggle CAPS
;			JR	Z, Toggle_Flags
;			CP	"1"			; Caps Shift + 1
;			LD	B, %00010000		; Toggle
;			RET	NZ

Toggle_Flags:		LD	A, (FLAGS)		; Toggle Caps Lock bit in flags
			XOR	B
			LD	(FLAGS), A
			XOR	A			; Clear the keycode
			RET

; Get adjusted charpos (takes scrollpos into account)
;
Get_Charpos		LD	HL, (CHARPOS_X)
Get_Charpos_1:		PUSH	AF
			LD	A, (CHAR_ROWS)
			LD	B, A
			LD	A, (SCRLPOS_Y)
			ADD	A, H 
			CP	B
			JR	C, 1F 
			SUB	B
1:			LD	H, A
			POP	AF
			RET
 
; Print a character at the current charpos
; Destroys nothing
;
Print_Char:		PUSH 	AF, BC, DE, HL, IX	; Stack all the registers
			CALL	1F			; Call the print routine
			POP	IX, HL, DE, BC, AF
			RET 
1:			LD	C, A			; Temporarily store the character
			LD	A, (VDU_STATE)		; What's the current VDU state?
			OR	A 			; If not zero...
			JR	NZ, VDU_READ_BYTES	; Read the data into the VDU buffer and don't output
			LD	A, C			; Get the character code back
			CP	32			; Is the character a control routine?
			JR	C, VDU_CTRL_CHAR	; Yes, so just handle that
			CP	0x7F			; Is it backspace?
			JR	Z, VDU_DEL 		; Yes, so deal with that
			CP	0xA9			; Bodge for Spectrum (C) symbol
			JR	NZ, 2F
			LD	A, 0x7F
2:			CALL	Get_Charpos		; Otherwise print it out		
			CALL	NEXT_GRAPHICS.Print_Char
			JP	VDU_HT

; &7F DEL - Delete
;
VDU_DEL:		CALL	VDU_BS
			LD	A, " "
			CALL	Get_Charpos
			JP	NEXT_GRAPHICS.Print_Char

; Just buffer the characters in the VDU buffer
; Until we have read enough in, then execute the relevant code
;
VDU_READ_BYTES:		LD	IX, VDU_STATE		; Indexes - 0: STATE, 1: PTR, 2: COUNT
			LD	HL, VDU_BUFFER		; HL: VDU buffer
			LD	A, (IX + 1)		; A: Current position in buffer
			ADD	HL, A 			; Index in
			LD	(HL), C			; Store the character
			INC	(IX + 1)		; Increase the pointer
			DEC	(IX + 2)		; Decrease the counter
			RET	NZ			; If not zero, then return
			LD	A, (IX + 0)		; Get the state		
			LD	(IX + 0), 0 		; Clear it
			DEC	A 			; Index from 1
			LD	IX, VDU_BUFFER
			CALL	SWITCH_A
			DEFW	VDU_EXEC_PLOT		
			DEFW	VDU_EXEC_COLOUR
			DEFW	VDU_EXEC_GCOL 
			DEFW	VDU_EXEC_TAB 
			DEFW	VDU_EXEC_MODE
			DEFW	VDU_EXEC_GORIGIN
			DEFW	VDU_EXEC_UDG

; Handle all control characters
;  A: Character code
;  C: Character code (copied in Print_Char)
;
VDU_CTRL_CHAR:		CALL	SWITCH_A
			DW 	VDU_NUL			; &00 NUL - Do nothing
			DW	VDU_NUL			; &01 SOH - Send next character to printer only
			DW	VDU_NUL			; &02 STX - Start print job
			DW	VDU_NUL			; &03 ETX - End print job
			DW	VDU_NUL			; &04 EOT - Write text at text cursor
			DW	VDU_NUL			; &05 ENQ - Write text at graphics cursor
			DW	VDU_NUL			; &06 ACK - Enable VDU drivers
			DW	VDU_NUL			; &07 BEL - Make a short beep
			DW	VDU_BS			; &08 BS  - Backspace
			DW	VDU_HT			; &09 HT  - Advance cursor one character
			DW	VDU_LF			; &0A LF  - Move cursor down one line
			DW	VDU_VT			; &0B VT  - Move cursor up one line
			DW	VDU_FF			; &0C FF  - Clear text area (CLS)
			DW	VDU_CR			; &0D CR  - Move cursor to start of current line
			DW	VDU_NUL			; &0E SO  - Page mode on
			DW	VDU_NUL			; &0F SI  - Page mode off
			DW	VDU_DLE			; &10 DLE - Clear graphcs area (CLG)
			DW	VDU_DC1			; &11 DC1 - Define text colour (COLOUR n)
			DW	VDU_DC2			; &12 DC2 - Define graphics colour (GCOL a, n)
			DW	VDU_DC3			; &13 DC3 - Define logical colour (COLOUR l, p, r, g, b)
			DW	VDU_DC4			; &14 DC4 - Set to default colours
			DW	VDU_NUL			; &15 NAK - Disable VDU drivers or delete current line
			DW	VDU_SYN			; &16 SYN - Select screen mode (MODE n)
			DW	VDU_ETB			; &17 ETB - Define display character and other commands; used by ON and OFF
			DW	VDU_NUL			; &18 CAN - Define graphics windows
			DW	VDU_EM			; &19 EM  - PLOT k, x, y (used by MOVE, DRAW, etc)
			DW	VDU_NUL			; &1A SUB - Restore default windows
			DW	VDU_NUL			; &1B ESC - Does nothing
			DW	VDU_NUL			; &1C FS  - Define text window
			DW	VDU_GS			; &1D GS  - Define graphics origin (ORIGIN)
			DW	VDU_RS			; &1E RS  - Home
			DW	VDU_US			; &1F US  - Move text cursor to X, Y (PRINT TAB(x,y));

; &00 NUL - Do nothing
;
VDU_NUL:		RET 

; &08 BS  - Backspace
; 
VDU_BS:			LD	A, (CHARPOS_X)
			OR	A
			JR	Z, 1F
			DEC	A 
			LD	(CHARPOS_X), A 
			RET 
1:			LD	A, (CHAR_COLS)
			DEC	A 
			LD	(CHARPOS_X), A 
			JR	VDU_VT


; &09: HT  - Advance to next character
;
VDU_HT:			LD	A, (CHAR_COLS)
			LD	B, A
			LD	A, (CHARPOS_X)
			INC	A
			LD	(CHARPOS_X), A 
			CP	B
			RET 	C 
			CALL	VDU_CR

; &0A LF  - Linefeed
;
VDU_LF:			LD	A, (CHAR_ROWS)
			LD	B, A
			LD	A, (CHARPOS_Y)
			INC	A 
			LD	(CHARPOS_Y), A 
			CP	B 
			RET 	C 
1:			LD	A, B 
			DEC 	A
			LD	(CHARPOS_Y), A
			JP 	NEXT_GRAPHICS.Scroll_Up

; &0B VT  - Move cursor up one line
;
VDU_VT:			LD	A, (CHARPOS_Y)
			DEC	A 
			LD	(CHARPOS_Y), A 
			RLCA 
			RET	NC 
			XOR	A 
			LD	(CHARPOS_Y), A 
			JP	NEXT_GRAPHICS.Scroll_Down

; &0C FF  - CLS
;
VDU_FF:			JP 	NEXT_GRAPHICS.CLS


; &0D CR  - Carriage Return
;
VDU_CR:			XOR	A 
			LD 	(CHARPOS_X), A
			RET 

; &10 DLE - CLG
;
VDU_DLE:		JP	NEXT_GRAPHICS.CLG

; &11 DC1 - COLOUR n
;
VDU_DC1:		LD	B, 1			; 1 byte (colour)
			LD	A, 2 			; State 2: COLOUR
			JR	VDU_SET_STATE

; &12 DC2 - GCOL a, n
;
VDU_DC2:		LD	B, 2 			; 2 bytes (mode, colour)
			LD	A, 3 			; State 3: GCOL
			JR	VDU_SET_STATE

; &13 DC3 - COLOUR n, p, r, g, b
;
VDU_DC3:		LD	B, 5			; 5 bytes (colour, p, r, g, b)
			LD	A, 2 			; State 2: COLOUR
			JR	VDU_SET_STATE

; &16 SYN - MODE n
VDU_SYN:		LD	B, 1			; 1 byte (mode)
			LD	A, 5 			; State 5: MODE
			JR	VDU_SET_STATE

; &17 ETB - Define display character and other commands; used by ON and OFF
;
VDU_ETB:		LD	B, 9			; 9 bytes (char, b0, b1, ..., b7)
			LD	A, 7			; State 7: UDG
			JR	VDU_SET_STATE

; &19 EM  - PLOT k, x, y
;
VDU_EM:			LD	B, 5			; 5 bytes (mode, xl, xh, yl, yh)
			LD	A, 1			; State 1: PLOT
			JR	VDU_SET_STATE

; &1D GS - Graphics Origin
;
VDU_GS:			LD	B, 4			; 4 bytes (OX, OY)
			LD	A, 6			; State 6: GORIGIN
			JR	VDU_SET_STATE

; &1E RS  - HOME
;
VDU_RS:			XOR	A
			LD 	(CHARPOS_X), A 
			LD	(CHARPOS_Y), A
			RET

; &1F US  - PRINT TAB(x,y);
;
VDU_US:			LD	B, 2			; 2 bytes (x, y)
			LD	A, 4			; State 4: TAB
			JR	VDU_SET_STATE

; Set up the VDU engine to redirect characters into VDU_BUFFER
;  A: Code for the state (the VDU character that initialised it, i.e. 25 for PLOT
;  B: Number of bytes to read before executing the state, i.e. 5 for PLOT
;
VDU_SET_STATE:		LD	(VDU_STATE), A
			LD	A, B
			LD	(VDU_COUNT), A 
			XOR	A 
			LD	(VDU_PTR), A 
			RET 

; PLOT: VDU 25,mode,x;y;
;
VDU_EXEC_PLOT:		LD	HL, (PLOTPOS_X)		; Store the previous plot points
			LD 	(PLOTPRE_X), HL 
			LD	HL, (PLOTPOS_Y)
			LD	(PLOTPRE_Y), HL
			LD	A, (VDU_BUFFER + 0)	; Plot style 
			LD	DE, (VDU_BUFFER + 1)	; X
			LD	HL, (VDU_BUFFER + 3)	; Y
			LD	(PLOTPOS_X), DE 	; Store new plot points
			LD	(PLOTPOS_Y), HL
			JP	NEXT_GRAPHICS.Plot

; VDU 20: Reset colours
;
VDU_DC4:		JP	NEXT_GRAPHICS.Reset_Colours

; COLOUR:
; VDU 17,colour
;
VDU_EXEC_COLOUR:	LD	A, (VDU_PTR)		; Check number of parameters
			CP	5			; If 5, then it is VDU 19,colour,p,r,g,b
			JR	NC, 1F
			DEC	A			
			RET	NZ			; Not 1, not VDU 17, exit
			LD	B, 0			; If 1, then it is VDU 17,colour
			LD	C, (IX + 0)
			JP	NEXT_GRAPHICS.Set_Text_Colour

; VDU 19,colour,phys,red,grn,blu
;               0-15,ign,ign,ign
;               16+ ,red,grb,blu - component strength %0.... to %1....
1:			LD	A, (IX + 1)
			CP	16
			JR	NC, 2F			; Set palette components
; to do, convert physical colour to palette components
2:			LD	A, (IX + 0)		; Get the palette colour to change
			LD	B, (IX + 2)		; Get the R component
			LD	C, (IX + 3)		; Get the G component
			LD	D, (IX + 4)		; Get the B component
			JP	NEXT_GRAPHICS.Set_Palette_RGB

; GCOL: VDU 18,mode,colour
;
VDU_EXEC_GCOL:		LD	A, (VDU_BUFFER + 0)
			LD	(PLOT_MODE), A 
			LD	C, (IX + 1)
			LD	B, 0
			JP	NEXT_GRAPHICS.Set_Plot_Colour

; TAB: VDU 31,x,y
;
VDU_EXEC_TAB:		LD	A, (VDU_BUFFER + 0)
			LD 	(CHARPOS_X), A 
			LD	A, (VDU_BUFFER + 1)
			LD	(CHARPOS_Y), A
			RET 

; MODE: VDU 22,mode
; To do: map 0,3 -> 80col
;            1,4 -> 40col
;            ?   -> 32col
VDU_EXEC_MODE:		LD	A, (VDU_BUFFER + 0)
			XOR	3
			JP 	NEXT_GRAPHICS.Set_Video_Mode

; Set graphics origin
; 
VDU_EXEC_GORIGIN:	LD	HL, (VDU_BUFFER + 0)
			LD	(PLOTORG_X), HL 
			LD	HL, (VDU_BUFFER + 2)
			LD	(PLOTORG_Y), HL 
			RET 

; Define a UDG
;
VDU_EXEC_UDG:		LD	HL, VDU_BUFFER
			LD	E, (HL)			; Get character code
			CALL	Get_Character_Data	; Get character data address in DE
			CP	0x40			; Is the character in ROM (A=high byte of address)
			RET 	C			; Yes, so return
			INC	L			; Copy the 8 bytes of character
			LD	BC, 8			; data into RAM
			LDIR
			RET

; Scan the keyboard
; A modified version of the ZX Spectum 48K ROM routine
; Returns:
;  E: Keycode (in the range 0 to 39), or 0xFF if no key pressed
;  D: Shift code - bit 0: caps, bit 1: symbol
;
Keyscan:		LD	L,  0x2F		; The initial key value for each line
			LD	DE, 0xFFFF		; Initialise DE to no-key
			LD	BC, 0xFEFE		; C = port address, B = counter
1:			IN	A, (C)			; Read bits from keyboard port
			CPL 
			AND	0x1F
			JR	Z, Keyscan_Done
			LD	H, A 			; Key bits go to the H register
			LD	A, L 			; Fetch initial key value
Keyscan_Multiple:	INC	D			; If three keys pressed, D will no longer contain FF
			RET	NZ			; So return at that point
2:			SUB	8			; Loop until we find a key
			SRL	H 
			JR	NC, 2B
			LD	D, E			; Copy any earlier key found to D
			LD	E, A			; And store the new key value in E
			JR	NZ, Keyscan_Multiple	; Loop if there are more keys
Keyscan_Done:		DEC	L			; Line has been scanned, so reduce initial key value for next pass
			RLC	B 			; Shift the counter
			JR	C, 1B			; And loop if there are still lines to be scanned
			INC	D			; If D = 0xFF, then single key pressed
			RET	Z
			DEC	D
			LD	A, E			; Symbol shift could be in E as code 0x18
			CP	0x18			
			JR 	NZ, 3F
			LD	E, D			; If it is, fetch the keycode from D
			LD	D, 0x18			; And set D to symbol shift code
3:			LD	A, D			; Get shift key value in D
			LD	D, 0			; Reset shift flags
			CP	0x27			; Check for caps shift
			JR	NZ, 4F			; Skip if not pressed
			SET	0, D 			; Set caps shift flag
4:			CP	0x18			; Check for symbol shift
			RET	NZ			; Skip if not pressed
			SET	1, D 			; Set symbol shift flag
			RET 

KeyTable_Main:		DB	"B", "H", "Y", "6", "5", "T", "G", "V"
			DB	"N", "J", "U", "7", "4", "R", "F", "C"
			DB	"M", "K", "I", "8", "3", "E", "D", "X"
			DB	$00, "L", "O", "9", "2", "W", "S", "Z"
			DB	$20, $0D, "P", "0", "1", "Q", "A", $00

KeyTable_CS_Numeric:
;			DB	$7f, $01, $02, $83, $84, $88, $8A, $8B, $89, $89, $1b, $0d
			DB	$7f, $01, $02, $83, $84, $08, $0A, $0B, $09, $89, $1b, $0d
			;	 0    1    2    3    4    5    6    7    8    9   spc  ret

KeyTable_SS_Numeric:	DB 	"_", "!", "@", "#", "$", "%", "&", "'", "(", ")", $20, $0d, $09
			;	 0    1    2    3    4    5    6    7    8    9   spc  ret  ext

KeyTable_SS_Alpha:	DB	"~", "*", "?", $5C, $87, "{", "}", "^"
			;	 a    b    c    d    e    f    g    h
			DB	$A9, "-", "+", "=", ".", ",", ";", $22
			;	 i    j    k    l    m    n    o    p
			DB	$85, "<", "|", ">", "]", "/", $86, $60
			;	 q    r    s    t    u    v    w    x
			DB	"[", ":"
			;	 y    z

; Available additional key combinations:
; CS-RET, SS-SPC, SS-RET

			ENDMODULE
