;
; Title:	BBC Basic Interpreter - Z80 version
;		Spectrum Next Graphics Routines
; Author:	eeDean Belfield
; Created:	06/05/2021
; Last Updated:	12/07/2021
;
; Modinfo:
; 09/05/2021:	Added Plot modes for Plot_ULA.
;		Plot_ULA now takes scroll position into account
; 10/05/2021:	Fixed call to FillDMA in L2_Clear_Screen 
; 13/05/2021:	Moved ULA and L2 specific code into their own files
; 15/05/2021:	Plot now pulls PLOT_MODE and PLOT_COLOUR direct from RAM; Updates for MODE command
; 16/05/2021:	Now uses SWITCH_A to select graphics commands by mode
; 17/05/2021:	Added Get_Char and Display_Cursor; Tweaks for COLOUR, GCOL
; 18/05/2021:	Draw_Line now uses a callback to plot points
; 20/05/2021:	Added Plot_Triangle
; 22/05/2021:	Added Point
; 25/05/2021:	Reference to CALL_IY changed to CALLREG IY
; 26/05/2021:	Added support code for Layer 2 modes 2 and 3
; 03/06/2021:	Removed Display_Cursor; Promoted graphics primitives to 16 bit coordinates
; 04/06/2021:	Fixed issues with negative coords, scroll offset and clipping in line and triangle
; 07/06/2021:	Fixed zero-length line bug; Set_Palette_RGB tweaks; Added Transform_Coordinates
; 11/06/2021:	Fixed logic to check zero-length lines
; 15/06/2021:	Set screen window and origin as per BBC (1280x1024, bottom left = 0,0)
; 21/06/2021:	Added support for CLG and Get_Char (Modes 1 to 3)
; 12/07/2021:	Added Get_Character_Data
; 13/07/2021:	JGH: API uses RGB colours, MODE resets colours

			MODULE	NEXT_GRAPHICS 

			include	"next_graphics_ULA.z80"
			include "next_graphics_L2.z80"

; Clear the screen
; NB: Should be "clear text|graphics window"
;
CLG:			LD	A, (PLOT_COLOUR)
			JR 	1F
CLS:			LD	A, (TEXT_BACKGROUND)
1:			LD	C, A
			XOR	A 
			LD	(SCRLPOS_Y), A 		; *BUG* CLG leaves text coords alone
			LD	(CHARPOS_X), A 
			LD	(CHARPOS_Y), A
			LD	A, (VIDEO_MODE)
			CALL	SWITCH_A
			DEFW	NEXT_GRAPHICS_ULA.Clear_Screen
			DEFW	NEXT_GRAPHICS_L2.Clear_Screen_M1
			DEFW	NEXT_GRAPHICS_L2.Clear_Screen_M2
			DEFW	NEXT_GRAPHICS_L2.Clear_Screen_M3

; Change the video mode
;  A: New video mode
;
Set_Video_Mode:		AND	3
			LD	(VIDEO_MODE), A
			PUSH	AF
			LD	E, 4
			CP	3
			JR	NZ, 1F
			DEC 	E 			; Narrow cursor for Mode 3
			DEC 	E
1:			CALL	NEXT_CURSOR.Initialise
			CALL	Reset_Colours
;			XOR	A
;			LD	(BORDER_COLOUR), A
			LD	L, A 
			LD	H, A 
			LD	(PLOTORG_X), HL 
			LD	(PLOTORG_Y), HL
			POP	AF
			CALL	SWITCH_A
			DEFW	NEXT_GRAPHICS_ULA.Set_Video_Mode
			DEFW	NEXT_GRAPHICS_L2.Set_Video_Mode_M1
			DEFW	NEXT_GRAPHICS_L2.Set_Video_Mode_M2
			DEFW	NEXT_GRAPHICS_L2.Set_Video_Mode_M3

Reset_Colours:		; to do: reset palette
			LD	A,%01000111		; White foreground
			LD	(TEXT_FOREGROUND),A
			LD	(PLOT_COLOUR),A
			XOR	A			; Black background
			LD	(TEXT_BACKGROUND),A
;			LD	(PLOT_BACKGROUND),A
			LD	(PLOT_MODE),A
			LD	C, A			; Black border

; Set border colour
;  C: Colour
;
Set_Border:		LD	A, C
			AND	7
			LD	(BORDER_COLOUR), A
			OUT	(254), A 
			RET

; Set a colour
;  C: Colour
;  =%0xxxxxxx - foreground
;  =%000fibgr - set whole ink
;  =%001xxbgr - set ink only
;  =%01xxxxxx - extension
;
;  =%1xxxxxx  - background
;  =%100fibgr - set whole paper
;  =%101xxbgr - set paper only
;  =%11xxxbgr - set border
;  B: Mode
;
Set_Text_Colour:	CALL	RGB_to_Spectrum	; Convert to hardware colour
			CP	192
			JR	NC,Set_Border	; COLOUR &C0+n
			LD	A, (VIDEO_MODE)
			CALL	SWITCH_A
			DEFW	NEXT_GRAPHICS_ULA.Set_Text_Colour
			DEFW	NEXT_GRAPHICS_L2.Set_Text_Colour
			DEFW	NEXT_GRAPHICS_L2.Set_Text_Colour
			DEFW	NEXT_GRAPHICS_L2.Set_Text_Colour

; Set graphics colour
;  C: Colour
;  B: Mode
;
Set_Plot_Colour:	CALL	RGB_to_Spectrum	; Convert to hardware colour
			AND	%10011111	; Drop non-graphics operations
			LD	C,A
			LD	A, (VIDEO_MODE)
			CALL	SWITCH_A
			DEFW	NEXT_GRAPHICS_ULA.Set_Plot_Colour
			DEFW	NEXT_GRAPHICS_L2.Set_Plot_Colour
			DEFW	NEXT_GRAPHICS_L2.Set_Plot_Colour
			DEFW	NEXT_GRAPHICS_L2.Set_Plot_Colour

; Convert BBC API colour to Spectrum hardware colour
; In:  C=    BBC RGB colour
; Out: C= A= Spectrum BRG colour
RGB_to_Spectrum:	LD	A,C	; Get RGB colour
			AND	7	; A=%00000BGR
			ADD	A	; A=%0000BGR0
			CP	8	; A=%0000BGR0 Cy=b
			CCF		; A=%0000BGR0 Cy=B
			ADC	0	; A=%0000BGRB
			AND	7	; A=%00000GRB
			XOR	C	; A=%cccccgrb
			AND	7	; A=%00000grb
			XOR	C	; A=%cccccGRB
			LD	C,A	; Return back to C
			RET


; Vertical scroll routines
;
Scroll_Down:		LD	H, 0			; Line to clear after scroll
			LD	A, (SCRLPOS_Y)
			DEC 	A 
			JP 	P, Scroll
			LD	A, (CHAR_ROWS)
			DEC	A
			JR 	Scroll
;
Scroll_Up:		LD	A, (CHAR_ROWS)
			LD	H, A			; Line to clear after scroll
			LD	A, (SCRLPOS_Y)
			INC	A 
			CP	H
			DEC	H
			JR	C, Scroll
			XOR	A 
;
Scroll:			LD	L, 0
			CALL	Set_Scroll_Reg
			CALL 	NEXT_IO.Get_Charpos_1
			LD	A, (CHAR_COLS)
			LD	B, A
1:			PUSH	BC
			PUSH	HL
			LD	A, ' '
			CALL	Print_Char
			POP	HL
			POP	BC 
			INC	L 
			DJNZ	1B
			RET
;			
Set_Scroll_Reg:		LD	(SCRLPOS_Y), A 
			LD	A, (VIDEO_MODE)
			CALL	SWITCH_A
			DEFW	NEXT_GRAPHICS_ULA.Set_Scroll_Reg
			DEFW	NEXT_GRAPHICS_L2.Set_Scroll_Reg
			DEFW	NEXT_GRAPHICS_L2.Set_Scroll_Reg
			DEFW	NEXT_GRAPHICS_L2.Set_Scroll_Reg

; Get a character off screen
;  L: X coordinate
;  H: Y coordinate
; Returns:
;  A: ASCII character, or 0xFF if no match
;  F: C if character match, otherwise NC
;
Get_Char:		CALL	Get_Char_1		; Get character data in R00 to R07
			LD	DE, ROM_Charset		; Start of system font
			LD	C, 32 			; ASCII code
0:			LD	B, 8			; Row counter
			PUSH	DE 			; Push the character address
			LD	HL, R00			; Character data read from screen
1:			LD	A, (DE)			; Get first row from charset
			CP	(HL)			; Compare it with screen
			JR	NZ, 2F			; If there is a mismatch, skip..
			INC	L			; Next row of character
			INC 	DE			; Next row of system font
			DJNZ	1B
			POP	DE			; Pop the character address
			LD	A, C			; At this point we have a match
			SCF
			RET				; Return the character, Z flag set
2:			POP	DE			; Pop the character address
			INC	C			; Increment character #
			BIT	7, C 			; If we've reached character 128
			JR 	NZ, 3F			; Then ret wih Z flag not set
			ADD	DE, 8 			; Advance 8 bytes to next character in system font
			JR	0B			; Lather, rinse and repeat
3:			XOR	A 			; Clear carry flag and
			INC	A			; Set A to 0xFF
			RET 

; Scrape character data off screen into an 8x8 1-bit format regardless of mode
;  L: X coordinate
;  H: Y coordinate
; Returns:
; R00 to R07: Character data
;
Get_Char_1:		LD	A, (VIDEO_MODE)
			CALL	SWITCH_A
			DEFW	NEXT_GRAPHICS_ULA.Get_Char
			DEFW	NEXT_GRAPHICS_L2.Get_Char_M1
			DEFW	NEXT_GRAPHICS_L2.Get_Char_M2
			DEFW	NEXT_GRAPHICS_L2.Get_Char_M3

; Print a single character out to an X/Y position
;  A: Character to print
;  L: X Coordinate
;  H: Y Coordinate
;
Print_Char:		LD	E, A 
			LD	A, (VIDEO_MODE)
			CALL	SWITCH_A
			DEFW	NEXT_GRAPHICS_ULA.Print_Char
			DEFW 	NEXT_GRAPHICS_L2.Print_Char_M1
			DEFW 	NEXT_GRAPHICS_L2.Print_Char_M2
			DEFW 	NEXT_GRAPHICS_L2.Print_Char_M3

; Boundary check
; DE: X
; HL: Y
; Returns
;  F: Carry set if on screen
;
Pixel_Bounds_Check:	LD	A, D			; If either of the high bytes
			OR	H 			; are negative, then
			ADD	A, A			; the pixel is out of bounds
			CCF
			RET	NC
			LD	BC, (PIXEL_HEIGHT)	; Now do a screen bounds
			CP16	HL, BC 			; comparison on the Y
			RET	NC 
			EX	DE, HL			; And now the X
			LD	BC, (PIXEL_WIDTH)
			CP16	HL, BC 
			EX	DE, HL
			RET	

; Scale X and Y coordinates
; Full screen X size:  20*N -> 0 to 1279  &000 to &500-1 (eg 10-col, 20-col, 40-col, 80-col MODEs)
;                      32*N -> 0 to 1023  &000 to &400-1 (eg 16-col, 32-col, 64-col MODEs)
;             Y size:  32*N -> 0 to 1023  &000 to &400-1 (eg 32-line MODEs)
;                      24*N -> 0 to  767  &000 to &300-1 (eg 24-line MODEs)
;
;  DE: X (0 to 1279) -> (0 to 255/320/640)
;  HL: Y (0 to 1023) -> (0 to 191/256)
; 
Transform_Coords:	LD	BC, (PLOTORG_Y)	; Add the plot origin to Y
			ADD	HL, BC 
			EX	DE, HL 
			LD	BC, (PLOTORG_X)	; And to X
			ADD	HL, BC
			EX	DE, HL
			LD	A, (VIDEO_MODE)
			CALL	SWITCH_A 
			DEFW 	Transform_Coords_256
			DEFW 	Transform_Coords_256
			DEFW 	Transform_Coords_320
			DEFW 	Transform_Coords_640
;
Transform_Coords_320:	SRA	D
			RR	E
;
Transform_Coords_640:	SRA	D 
			RR 	E 
			LD	B, H 
			LD	C, L
			LD	HL, 1023 
			SUB	HL, BC
			SRA	H
			RR	L
			SRA	H 
			RR	L
			RET
;
Transform_Coords_256:	PUSH	HL  		; Stack Y
			LD	BC, 5		; BC'BC: Divisor (5.0)
			EXX
			LD	BC, 0 
			CALL	Transform_Div
			EX	DE, HL		; HL: Answer
			EX	(SP), HL	; HL': Y (DE -> STACK)
			EX	DE, HL		; DE': Dividend - Y coordinate
			LD	HL, 1023
			SUB	HL, DE
			EX	DE, HL		; DE': Dividen - 1023 - Y coordinate
			LD	BC, 5		; BC'BC: Divisor (5.3)
			EXX
			LD	BC, 21845
			CALL	Transform_Div
			EX	DE, HL		; HL: Y
			POP	DE		; DE: X
			RET

; Coordinate Division
;    DE: Dividend
; BC'BC: Divisor
; Returns:
;    DE: Answer
;
Transform_Div:		EXX
			BIT	7, D 
			PUSH	AF
			JR	Z, 1F
			NEG16	DE
1:			XOR	A 
			LD	H, A 
			LD	L, A	
			EXX	
			LD	H, A 
			LD	L, A 
			LD	D, A 
			LD	E, A
			LD	A, -33
			CALL	FPP.DIVA
			POP	AF 
			RET 	Z
			NEG16	DE
			RET

; POINT(x,y)
; Read a point off the screen
; DE: X
; HL: Y
; Returns:
;  A: Point value
; NB: Underlying primitive only returns Off/On, not colour
;
Point:			CALL	Pixel_Bounds_Check
			LD	A, 0
			RET	NC 
			LD	A, (VIDEO_MODE)
			CALL	SWITCH_A 
			DEFW 	NEXT_GRAPHICS_ULA.Point
			DEFW 	NEXT_GRAPHICS_L2.Point_M1
			DEFW 	NEXT_GRAPHICS_L2.Point_M2
			DEFW 	NEXT_GRAPHICS_L2.Point_M3
		
; PLOT n,x,y
; Graphics Operations
; DE: X
; HL: Y
;  A: Type
;
Plot:			AND	%11111000		; Ignore bottom 3 bits of type
			CP	64			; If less than 64, it's a line
			JP	C, Plot_Line 
			JR	Z, Plot_Point		; 64+n -> then plot a point
			CP	80	
			JR	Z, Plot_Triangle	; 80+n -> draw a trangle
			CP	144
			JP	Z, Plot_Circle		; 144+n -> draw a circle
			RET	

; Plot a point
; DE: X
; HL: Y
;
Plot_Point:		CALL	Pixel_Bounds_Check
			RET	NC
			LD	A, (VIDEO_MODE)
			CALL	SWITCH_A 
			DEFW 	NEXT_GRAPHICS_ULA.Plot
			DEFW 	NEXT_GRAPHICS_L2.Plot_M1
			DEFW 	NEXT_GRAPHICS_L2.Plot_M2
			DEFW 	NEXT_GRAPHICS_L2.Plot_M3

; Plot a line
; DE: X
; HL: Y
;
Plot_Line:		JP	Primitive_Line

; Plot a circle
; DE: X: Ignored
; HL: Y: Radius
;
Plot_Circle:		LD	DE, (PIXEL_HEIGHT)
			EX	DE, HL 
			SUB	HL, DE 
			BIT	7, H
			CALL	Z, Primitive_Circle
			RET

; Plot a filled triangle
; First and second points in PLOTPRE and PLOTPOS
; DE: X
; HL: Y
;
Plot_Triangle:		JP 	Primitive_Triangle

; Set a palette colour
;  A: Colour to change (0 - 255)
;  B: R colour (3 bits - %rrrxxxxx)
;  C: G colour (3 bits - %gggxxxxx)
;  D: B colour (3 bits - %bbbxxxxx)
;
Set_Palette_RGB:	NEXTREG	0x40, A 		; Select the colour to change
; this looks wrong
			LD	A, B			; Get RED component
			AND	%00000111		; %00000RRR
			SWAPNIB				; %0RRR0000
			ADD	A, A			; %RRR00000
			LD	B, A			; Store in B
			LD	A, C			; Get GREEN component
			AND	%00000111		; %00000GGG
			ADD	A, A 			; %0000GGG0
			ADD	A, A			; %000GGG00
			OR	B 			; %RRRGGG00
			LD	B, A 			; Store in B
			LD	A, D 			; Get BLUE component
			AND	%00000110		; %00000BB0
			RRA 				; %000000BB
			OR	B 			; %RRRGGGBB
			LD	B, A
			NEXTREG	0x44, A 		; Write out first 8 bits
			LD	A, D 			; Get BLUE component
			AND	%00000001 		; Get 9th bit
			LD	C, A
			NEXTREG	0x44, A 		; Write out final bit 
			RET 

; Get charset bitmap data address
;  E: Character to print
; Retuns
; DE: Charset bitmap data address
;  A: High byte of address (<0x40 for ROM)
;
@Get_Character_Data:	LD	D, E 			; Store the character code
			RLC 	E
			RLC 	E
			RLC 	E
			SETAE 				; Get the mask
			LD	E, A
			LD	A, (UDG_MASK)
			AND	E			; Result is NZ if character data in RAM,
			LD 	A, (high ROM_Charset)-1	; Address of character set in ROM (HIGH)
			JR	Z, 1F			
			LD	A, D 			; Need to calculate address in RAM for UDG
			SUB	128			; Characters 128 upwards are stored first
			LD	D, A 
			LD	A, (HIMEM+1)		; Base address of characters is HIMEM
1:			LD	E, 8 			; Multiply the character code by 8
			MUL	D, E
			ADD 	A, D
			LD 	D, A
			RET			

; ----------------------------------------------------------------------------
; Graphics Primitives
; ----------------------------------------------------------------------------

; Draw a line using Bresenham's Incremental Line algorithm
;
; PLOTPOS_X: X pixel position 1
; PLOTPOS_Y: Y pixel position 1
;
; DE : X pixel position 2
; HL : Y pixel position 2
; BC : Loop counter
; HL': Error value for Bresenhams
; DE': Line height
; BC': Line width
; R00: X step
; R02: Y step
;
Primitive_Line:		PUSH	HL			; Stack Y2
			PUSH	DE			; Stack X2
			EXX				; Switch to alternative registers
;
			POP	HL			; Get X2
			LD	BC, (PLOTPOS_X)		; Get X1
			SUB	HL, BC 			; Get width in HL
			LD	BC, 1
			JP	P, 1F
			NEG16	HL
			LD	BC, -1 
1:			LD	(R00), BC 		; Horizontal line direction
			EX	DE, HL			; DE': Width
;
			POP	HL			; Get Y2
			LD	BC, (PLOTPOS_Y)		; Get Y1
			SUB	HL, BC 			; HL': Height
			LD	BC, 1 
			JP	P, 2F
			NEG16	HL 
			LD	BC, -1
2:			LD	(R02), BC		; Vertical line direction
;
			LD	A,H			; Check for zero length line
			OR	L 
			OR	E
			OR	D 
			RET	Z
;
			CP16	HL, DE			; Work out which diagonal we are on
			JR	NC, Primitive_Line_Q2	; Height > Width, so jump to Q2
			EX 	DE, HL			; Swap width and height and use Q1
;
; This bit of code draws the line where BC>DE (more horizontal than vertical)
;		
Primitive_Line_Q1:	CALL	Primitive_Line_Init
1:			PUSH	BC
			CALL	Primitive_Line_Plot
			EXX				; Switch to main registers
			JR	NC, 2F
			LD	BC, (R02)		; Increment Y
			ADD	HL, BC
2:			EX	DE, HL
			LD	BC, (R00)
			ADD	HL, BC 
			EX	DE, HL
			POP	BC
			DJNZ	1B 			; Loop
			DEC	C 
			JR	NZ, 1B
			JP	Plot_Point
;
; This bit of code draws the line where BC<=DE (more vertical than horizontal)
;
Primitive_Line_Q2:	CALL	Primitive_Line_Init
1:			PUSH	BC
			CALL	Primitive_Line_Plot
			EXX				; Switch to main registers
			JR	NC, 2F
			EX	DE, HL 			; Increment X
			LD	BC, (R00)
			ADD	HL, BC 
			EX 	DE, HL
2:			LD	BC, (R02)		; Increment Y
			ADD	HL, BC
			POP	BC
			DJNZ	1B 			; Loop
			DEC	C 
			JR	NZ, 1B
			JP	Plot_Point
;
; Initialise the line routine
;
Primitive_Line_Init:	PUSH	HL			; Push line dimension	
			LD	B, H			; BC': Width
			LD	C, L
			SRL	H 			; HL': Error value for Bresenhams
			RR 	L
			EXX 				; Switch to main registers
			LD	DE, (PLOTPOS_X)		; Starting point
			LD	HL, (PLOTPOS_Y)
			POP	BC			; BC: Loop counter
			LD	A, C 			; Adjust so that it will
			DEC	BC 			; work with a DJNZ/DEC loop
			INC	B
			LD	C, B 
			LD	B, A
			RET
;
; Plot the point and run the Bresenham's algorithm
;
Primitive_Line_Plot:	PUSH	DE 
			PUSH	HL
			CALL	Plot_Point
			POP	HL
			POP	DE
			EXX 				; Switch to alternative registers
			SUB	HL, DE			; Subtract the line height from the error (HL = HL - DE)
			RET	NC
			ADD	HL, BC			; Add the line width to the error (HL = HL + BC)
			RET 				; C set at this point

; Draw Circle
;
; PLOTPOS_X: X pixel position of circle centre
; PLOTPOS_Y: Y pixel position of circle centre
;
;  L: Radius
;
Primitive_Circle:	LD	A, L
			AND	A			; Is it zero radius
			JP	Z,Plot_Point		; Just plot the point
			LD	IXL, 0			; IXL: X
			LD	IXH, A			; IXH: Y (Initially R)
;
; Calculate BC (D2) = 3 - (R * 2)
;
			LD	H, 0			; HL is R with top byte zeroed out
			ADD	HL, HL			; HL = R * 2
			EX	DE, HL			; DE = R * 2
			LD	HL, 3
			AND	A
			SBC	HL, DE			; HL = 3 -( R * 2)
			LD	B, H		
			LD	C, L			; BC - 3 - (R * 2)
;
; Calculate HL (Delta) = 1 - R
;
			LD	HL, 1
			LD	D, 0
			LD	E, IXH
			AND	A
			SBC	HL,DE			; HL = 1 - R
;
; SET DE (D1) = 1
;
			LD	DE, 1

1:			LD	A, IXH			; Get Y in A
			CP	IXL			; Compare with X
			RET	C			; Return if X > Y
;
; The routine only calculates an eighth of the circle, so use symnmetry to draw
;			
			MACRO	PLOTC r1, r2		; Macro to simplify the source code
			LD	DE, (PLOTPOS_X)		; Plot +X, +Y
			LD	HL, (PLOTPOS_Y)
			LD	A, r1
			ADD	DE, A 
			LD	A, r2
			ADD	HL, A 
			CALL	Plot_Point
			LD	HL, (PLOTPOS_X)		; Plot -X, +Y
			LD	DE, (PLOTPOS_Y)
			LD	B, 0
			LD	C, r1
			SBC	HL, BC 
			EX	DE, HL 
			LD	A, r2
			ADD	HL, A 
			CALL	Plot_Point
			LD	DE, (PLOTPOS_X)		; Plot +X, -Y
			LD	HL, (PLOTPOS_Y)
			LD	A, r1
			ADD	DE, A 
			LD	B, 0
			LD	C, r2
			SBC	HL, BC
			CALL	Plot_Point
			LD	HL, (PLOTPOS_X)		; Plot -X, -Y
			LD	DE, (PLOTPOS_Y)
			LD	B, 0
			LD	C, r1
			SBC	HL, BC 
			EX	DE, HL 
			LD	C, r2
			SBC	HL, BC
			CALL	Plot_Point
			ENDM
			EXX
			PLOTC 	IXL, IXH 
			PLOTC 	IXH, IXL
			EXX
;
; Do the incremental circle thing here
;
			LD	A, 2
			BIT	7, H			; Check for Hl<=0
			JR	Z, 2F
			ADD	HL, DE			; Delta=Delta+D1
			JR	3F			 
2:			ADD	HL, BC			; Delta=Delta+D2
			ADD	BC, A
			DEC	IXH			; Y=Y-1
3:			ADD	BC, A 			; D2=D2+2
			ADD	DE, A			; D1=D1+2
			INC	IXL			; X=X+1
			JP	1B

; Draw a horizontal line between two points
; HL: Y
; BC: X1
; DE: X2
;
Primitive_Line_Horz:	BIT 	7, H 			; Check if line off top of screen
			RET	NZ
			PUSH	BC			; And the bottom
			LD	BC, (PIXEL_HEIGHT)
			CP16	HL, BC 
			POP	BC 
			RET	NC
;
			LD	A, B 			; Check if both points are off LHS
			AND	D 
			RET	M 
;
			BIT	7, B 			; Clip the LHS of the line
			JR	Z, 1F
			LD	BC, 0
;
1:			BIT	7, D 
			JR	Z, 2F 
			LD	DE, 0
;
2:			PUSH	HL			; Clip the RHS of the line
			XOR	A
			LD	HL, (PIXEL_WIDTH)
			DEC	HL
			CP16	HL, BC 
			JR	NC, 3F
			LD	B, H 
			LD	C, L
			INC	A
3:			CP16	HL, DE
			JR	NC, 4F
			LD	D, H
			LD	E, L
			INC	A
4:			POP 	HL
			DEC	A 			; Are both points off screen?
			DEC 	A
			RET 	Z
			LD	A, (VIDEO_MODE)		; Draw the line
			CALL	SWITCH_A 
			DEFW 	NEXT_GRAPHICS_ULA.Draw_Horz_Line
			DEFW 	NEXT_GRAPHICS_L2.Draw_Horz_Line_M1
			DEFW 	NEXT_GRAPHICS_L2.Draw_Horz_Line_M2
			DEFW 	NEXT_GRAPHICS_L2.Draw_Horz_Line_M3

; Draw a filled triangle
;
; PLOTPRE_X: X pixel position 1
; PLOTPRE_Y: Y pixel position 1
; PLOTPOS_X: X pixel position 2
; PLOTPOS_Y: Y pixel position 2
;
; DE : X pixel position 3
; HL : Y pixel position 3
; 
; Algorithm: First sort the 3 points by Y ascending:
;
; if(a > c) swap(a, c)
; if(a > b) swap(a, b)
; if(b > c) swap(b, c)
;
; Then draw the longest line (a->c) and (a->b) together
; Once that is complete, draw line (b->c), continuing to draw line (a->c)
; The line draw routine needs to loop until the y value is incremented
; Once that's been done for both pairs, draw a horizontal line between them
;
Primitive_Triangle:	LD	(ACCS + 0), DE	; Store X3
			LD 	(ACCS + 2), HL	; And Y3
			LD 	HL, PLOTPRE_X	; Copy the other two points in
			LD	DE, ACCS + 4 
			LD	BC, 8
			LDIR	
			LD	BC, 0x0008	; Sort the vertices in ascending Y order
			CALL	Primitive_Triangle_S	
			LD	BC, 0x0004
			CALL	Primitive_Triangle_S
			LD	BC, 0x0408
			CALL	Primitive_Triangle_S
;
; Here, the points are stored sorted in ascending order in ACCS
;
; A(X,Y): ACCS+0x00, ACCS+0x02
; B(X,Y): ACCS+0x04, ACCS+0x06
; C(X,Y): ACCS+0x08, ACCS+0x0A
;
; Start drawing the top of the triangle...
;
			LD	IX, R00			; Set up the longest line
			CALL 	Primitive_Triangle_AC	; between A and C
			LD	IX, R09			; And the top short line
			CALL 	Primitive_Triangle_AB	; between A and B
			CALL	Primitive_Triangle_LC	; Get the loop counter value in BC
			LD	HL, (ACCS + 0x02)	; Start Y coordinate
			CALL	1F 			; Render
			PUSH	HL 			; Stack the Y coordinate
			LD	IX, R09			; Set up the bottom shotr line
			CALL 	Primitive_Triangle_BC	; between B and C
			CALL	Primitive_Triangle_LC	; Get the loop counter value in BC
			POP	HL			; Pop the Y coordinate
;
; Draw the triangle
;			
1:			LD	A, B 			; Check for 0 height triangles
			OR	C 
			RET 	Z		
			PUSH	BC 			; Stack the loop counter and Y index
			PUSH	HL
			LD	IX, R00			; Advance the long line 1 pixel down
			CALL 	Primitive_Triangle_B
			LD	IX, R09			; Advance the shorter line 1 pixel down
			CALL 	Primitive_Triangle_B
			POP	HL 			; Get the Y coordinate
			PUSH	HL 
			LD	BC, (R00)		; Draw a horizontal line between the two X coordinates
			LD	DE, (R09)
			CALL	Primitive_Line_Horz
			POP 	HL			; Restoer Y and
			INC	HL 			; Increment it
			POP	BC			; Loop
			DEC	BC
			JR	1B

; Do the Bresenham's algorithm
; IX: Pointer to a block of line variables
;
Primitive_Triangle_B:	LD	L, (IX + 6)		; HL: Error
			LD	H, (IX + 7)
			LD	C, (IX + 2)		; BC: Width
			LD	B, (IX + 3)
			LD	E, (IX + 4)		; DE: Height
			LD	D, (IX + 5)	
;
			BIT	1, (IX + 8)		; Quadrant
			JR	Z, 1F
;
			SUB	HL, DE 			; Tall line
			JR	NC, 0F
			ADD	HL, BC 
			CALL	Primitive_Triangle_X	; Adjust X coordinate
0:			LD	(IX + 6), L		; Store the error back
			LD	(IX + 7), H
			RET
;	
1:			CALL	Primitive_Triangle_X	; Move X
			SUB	HL, DE			; Subtract the height	
			JR	NC, 1B
			ADD	HL, BC			; Add the width
			LD	(IX + 6), L		; Store the error back
			LD	(IX + 7), H
			RET				; And return, as we're incrementing Y at this point
;
; Move X coordinate 1 pixel left or right
; IX: Pointer to a block of line variables
;
Primitive_Triangle_X:	BIT	0, (IX + 8)		; Direction
			JR	NZ, 1F
			INC	(IX + 0)		; Increment X
			RET	NZ
			INC	(IX + 1)			
			RET
1:			DEC	(IX + 0)		; Decrement X
			LD	A, (IX + 0)
			INC	A
			RET	NZ
			DEC	(IX + 1)
			RET

; Initialise a block of line variables
; IX: Pointer to a block of line variables
;  B: Pointer to line start coordinates in ACCS
;  C: Pointer to line end coordinates in ACCS
;
; IX: 9 bytes required per line
;
;   +00: X
;   +02: W (word)
;   +04: H (word)
;   +06: E (word)
;   +08: Flags
;
; Initialise line A->B
; 
Primitive_Triangle_AB:	LD	HL, (ACCS + 0x06)	; HL: B(Y)
			LD	DE, (ACCS + 0x02)	; DE: A(Y)
			SUB	HL, DE
			EX	DE, HL 			; DE: Height
			LD	HL, (ACCS + 0x04)	; HL: B(X)
			LD	BC, (ACCS + 0x00)	; BC: A(X)
			JR	Primitive_Triangle_I	; And initiliase...
;
; Initialise line B->C
;
Primitive_Triangle_BC:	LD	HL, (ACCS + 0x0A)	; HL: C(Y)
			LD	DE, (ACCS + 0x06)	; DE: B(Y)
			SUB	HL, DE
			EX	DE, HL 			; DE: Height
			LD	HL, (ACCS + 0x08)	; HL: C(X)
			LD	BC, (ACCS + 0x04)	; BC: B(X)
			JR	Primitive_Triangle_I	; And initiliase...
;
; Initialise line A->C
;
Primitive_Triangle_AC:	LD	HL, (ACCS + 0x0A)	; HL: C(Y)
			LD	DE, (ACCS + 0x02)	; DE: A(Y)
			SUB	HL, DE
			EX	DE, HL 			; DE: Height
			LD	HL, (ACCS + 0x08)	; HL: C(X)
			LD	BC, (ACCS + 0x00)	; BC: A(X)
;
Primitive_Triangle_I:	LD	(IX + 0) , C 		; Store X
			LD	(IX + 1) , B
			SUB	HL, BC 			; HL: Width
			LD	C, 0x00
			JP	P, 1F
			NEG16 	HL
			LD	C, 0x01
1:			CP16	HL, DE 			; HL: Width - DE: Height, if NC, W > H
			JR	NC, 2F 
			EX	DE, HL 			; H > W, so swap them
			SET 	1, C			; And set the H > W flag
2:			LD	(IX + 2), L 		; Width
			LD	(IX + 3), H 
			LD	(IX + 4), E 		; Height
			LD	(IX + 5), D 
			SRL	H 
			RR 	L 
			LD	(IX + 6), L 		; Error
			LD	(IX + 7), H 
			LD	(IX + 8), C 		; Flags
			RET 

; Get the loop counter
; IX: Pointer to a block of line variables
; Returns:
; BC: Loop counter
; 
Primitive_Triangle_LC:	BIT	1, (IX + 8)		; Return the correct loop counter
			JR	Z, 1F		
			LD	C, (IX + 2)
			LD 	B, (IX + 3) 
			RET 
1:			LD	C, (IX + 4)
			LD	B, (IX + 5)
			RET 

; Swap R[B] with R[C] if R[B] > R[C]
; Assumes R[0] is on a page boundary
; B: Index 1
; C: Index 2
;
Primitive_Triangle_S:	LD	H, high ACCS	; D and H set to ACCS page
			LD	D, H		
			LD	L, C 		; Get pointer to second value in HL
			LD	E, B 		; Get pointer to first value in DE
			INC	L 
			INC	L
			LD	A, (HL)		; Fetch second Y value in DE
			INC	L 
			LD	H, (HL)
			LD	L, A
			EX	DE, HL	
			INC	L 
			INC 	L	
			LD	A, (HL)		; Fetch first Y value in HL
			INC	L 
			LD	H, (HL)
			LD	L, A
			SUB	HL, DE
			RET	M
;
; At this point we need to swap the four bytes pointed to by DE
; with the four points pointed to by HL
;
			LD	H, high ACCS	; D and H set to ACCS page
			LD	D, H
			PUSH	BC		; Stack the pointers					
			LD	L, B		; Copy the first set of values to ACCS + 12
			LD	E, 12		
			LD	BC, 4
			LDIR
			POP	BC
			LD	A, C		; Store second pointer in A
			LD	L, C		; Copy the second set of values over the first set
			LD	E, B
			LD	BC, 4
			LDIR
			LD	L, 12		; Copy the first set from ACCS + 12 to the second set
			LD	E, A 
			LD	BC, 4 
			LDIR 
			RET 

			ENDMODULE